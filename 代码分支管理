版本号
       一级版本号 ：项目有大的迭代或更新的时候提供的版本号,序号从0开始往下顺延。

       二级版本号 ：项目小版本迭代的时候提供的版本号，序号从0开始顺延。

       三级版本号 ：用与bug修复的版本。序号从0开始顺延。

       版本号之间用“.”隔开。

分支类型
master  生产服务代码所在分支
     用于部署生产环境。

test    测试服务代码所在分支
     用与部署测试环境。

       分支创建：

              默认创建test分支，用于存放可测试代码。

       代码更新：

              开发分支定时或分阶段merge到该分支上。

       分支合并：

              测试通过之后将代码merge到release分支上。

              具体步骤：

              1， test分支合并release分支上代码。

              2， 切换到release合并test分支上代码。

 

release 预生产代码所在分支
       用于部署预生产环境。

       分支创建：

              默认创建release 分支，用于存放测试通过后的代码和修复bug后的代码。

       代码更新：

              测试分支测试通过之后合并。

              Bug修复之后的合并。

       分支合并：

              预生产成功之后，将代码merge到master分支上。

              具体步骤：

1， release分支上合并master分支上代码。

2， 切换到master分支，合并release分支上的代码。

 

develop  开发分支
     用于开发人员开发和测试的分支，开发完成之后需要提交的test分支用于测试。

       分支命名规则：DEVELOP-V{一级版本号}.{二级版本号} 例如：DEVELOP-V1.0。

       分支创建：

              基于项目迭代定义版本号。即每次迭代都会克隆master分支的code作为新的分支。

       分支合并：

              当前迭代任务开发完成或达到部分可测试的阶段，将代码合并到test分支上。

              具体步骤：

                     1,develop分支合并test分支的代码。

                     2,切换到test分支，合并develop分支上代码。

 

fix   修复bug所在分支
用于修复生产环境bug的分支。

fix分支 命名规范： FIX-V{一级版本号}.{二级版本号}.{三级版本号}。例如：FIX-V1.0.0。   

分支创建：

         克隆master分支代码。

分支合并：

         Bug修复之后代码合并到release分支

具体步骤：

1， fix分支合并release分支上代码。

2， 切换到release合并fix分支上代码。
